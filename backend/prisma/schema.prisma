// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String    @id @default(cuid())
  name      String
  users     User[]
  Product   Product[]
  Order     Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Invoice   Invoice[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId  String?
}

model Product {
  id        String   @id @default(cuid())
  name      String
  price     Float
  stock     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
  Order     Order[]
}

model Order {
  id        String    @id @default(cuid())
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  tenantId  String
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  Invoice   Invoice[]
}

model Invoice {
  id          String   @id @default(uuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  totalAmount Decimal
  createdAt   DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}
